package com.blidormf.malwaresniffer.controller;

import com.blidormf.malwaresniffer.model.Comment;
import com.blidormf.malwaresniffer.model.FileInfo;
import com.blidormf.malwaresniffer.model.LinkInfo;
import com.blidormf.malwaresniffer.model.User;
import com.blidormf.malwaresniffer.repository.CommentRepository;
import com.blidormf.malwaresniffer.repository.FileInfoRepository;
import com.blidormf.malwaresniffer.repository.LinkInfoRepository;
import com.blidormf.malwaresniffer.repository.UserRepository;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.time.LocalDateTime;

@Controller
public class CommentController {
    private final FileInfoRepository fileInfoRepository;
    private final LinkInfoRepository linkInfoRepository;
    private final CommentRepository commentRepository;
    private final UserRepository userRepository;

    public CommentController(FileInfoRepository fileInfoRepository,
                             LinkInfoRepository linkInfoRepository,
                             CommentRepository commentRepository,
                             UserRepository userRepository) {
        this.fileInfoRepository = fileInfoRepository;
        this.linkInfoRepository = linkInfoRepository;
        this.commentRepository = commentRepository;
        this.userRepository = userRepository;
    }

    @PostMapping("/files/{fileHash}/comments")
    public String createFileComment(@PathVariable String fileHash, @RequestParam String content, @AuthenticationPrincipal OAuth2User principal) {
        FileInfo fileInfo = fileInfoRepository.findById(fileHash).orElse(null);
        if (fileInfo == null) {
            // Handle file not found
            return "redirect:/";
        }

        String username = principal.getAttribute("login");
        User user = userRepository.findById(username).orElse(null);

        Comment comment = new Comment();
        comment.setContent(content);
        comment.setCreatedAt(LocalDateTime.now());
        comment.setUser(user);
        comment.setFileInfo(fileInfo);

        commentRepository.save(comment);

        return "redirect:/files/" + fileHash;
    }

    @PostMapping("/links/{linkHash}/comments")
    public String createLinkComment(@PathVariable String linkHash, @RequestParam String content, @AuthenticationPrincipal OAuth2User principal) {
        LinkInfo linkInfo = linkInfoRepository.findById(linkHash).orElse(null);
        if (linkInfo == null) {
            return "redirect:/";
        }

        String username = principal.getAttribute("login");
        User user = userRepository.findById(username).orElse(null);

        Comment comment = new Comment();
        comment.setContent(content);
        comment.setCreatedAt(LocalDateTime.now());
        comment.setUser(user);
        comment.setLinkInfo(linkInfo);

        commentRepository.save(comment);

        return "redirect:/links/" + linkHash;
    }
}
