package com.blidormf.malwaresniffer.controller;

import com.blidormf.malwaresniffer.model.Comment;
import com.blidormf.malwaresniffer.model.FileInfo;
import com.blidormf.malwaresniffer.model.LinkInfo;
import com.blidormf.malwaresniffer.repository.CommentRepository;
import com.blidormf.malwaresniffer.repository.FileInfoRepository;
import com.blidormf.malwaresniffer.repository.LinkInfoRepository;
import com.blidormf.malwaresniffer.service.FileUploadService;
import com.blidormf.malwaresniffer.service.LinkUploadService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.format.DateTimeFormatter;
import java.util.List;

@Controller
public class MalwareScanController {
    private final FileUploadService fileUploadService;
    private final LinkUploadService linkUploadService;
    private final FileInfoRepository fileInfoRepository;
    private final LinkInfoRepository linkInfoRepository;
    private final CommentRepository commentRepository;

    @Autowired
    public MalwareScanController(FileUploadService fileUploadService,
                                 LinkUploadService linkUploadService,
                                 FileInfoRepository fileInfoRepository,
                                 LinkInfoRepository linkInfoRepository,
                                 CommentRepository commentRepository) {
        this.fileUploadService = fileUploadService;
        this.linkUploadService = linkUploadService;
        this.fileInfoRepository = fileInfoRepository;
        this.linkInfoRepository = linkInfoRepository;
        this.commentRepository = commentRepository;
    }

    @GetMapping("/")
    public String showUploadForm() {
        return "upload-form";
    }

    @GetMapping("/files/{fileHash}")
    public String showFileInfo(@PathVariable String fileHash, Model model) {
        FileInfo fileInfo = fileInfoRepository.findById(fileHash).orElse(null);
        if (fileInfo == null) {
            // Handle file not found
            return "redirect:/";
        }

        List<Comment> comments = commentRepository.findByFileHash(fileHash);

        model.addAttribute("fileInfo", fileInfo);
        model.addAttribute("comments", comments);

        return "file-scan-result";
    }

    @PostMapping("/file-scan-results")
    public String handleFileUpload(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes) {
        try {
            FileInfo fileInfo = fileUploadService.saveFile(file);

            return "redirect:/files/" + fileInfo.getFileHash();
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("fileError", "An error occurred while scanning the file.");
            return "redirect:/";
        }
    }

    @GetMapping("/links/{linkHash}")
    public String showLinkInfo(@PathVariable String linkHash, Model model) {
        LinkInfo linkInfo = linkInfoRepository.findById(linkHash).orElse(null);
        if (linkInfo == null) {
            // Handle link not found
            return "redirect:/";
        }

        List<Comment> comments = commentRepository.findByLinkHash(linkHash);

        model.addAttribute("linkInfo", linkInfo);
        model.addAttribute("comments", comments);

        return "link-scan-result";
    }

    @PostMapping("/link-scan-results")
    public String scanLink(@RequestParam("url") String url, Model model, RedirectAttributes redirectAttributes) {
        try {
            LinkInfo linkInfo = linkUploadService.saveUrl(url);

            return "redirect:/links/" + linkInfo.getLinkHash();
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("linkError", "An error occurred while scanning the link.");
            return "redirect:/";
        }
    }
}
