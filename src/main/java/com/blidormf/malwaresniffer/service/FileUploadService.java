package com.blidormf.malwaresniffer.service;

import com.blidormf.malwaresniffer.model.FileInfo;
import com.blidormf.malwaresniffer.repository.FileInfoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;

@Service
public class FileUploadService {

    private final FileInfoRepository fileInfoRepository;
    private final HashingService hashingService;
    private final MalwareDetectionService malwareDetectionService;

    @Value("${python.upload.directory}")
    private String uploadDirectory;

    @Autowired
    public FileUploadService(FileInfoRepository fileInfoRepository,
                             HashingService hashingService,
                             MalwareDetectionService malwareDetectionService) {
        this.fileInfoRepository = fileInfoRepository;
        this.hashingService = hashingService;
        this.malwareDetectionService =  malwareDetectionService;
    }

    public FileInfo saveFile(MultipartFile file) throws Exception {
        String fileHash = hashingService.calculateSHA256(file.getBytes());

        FileInfo existingFile = fileInfoRepository.findById(fileHash).orElse(null);
        if (existingFile != null) {
            return existingFile;
        }

        Path uploadPath = Paths.get(uploadDirectory);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        malwareDetectionService.setFileName(file.getOriginalFilename());

        Path filePath = uploadPath.resolve(file.getOriginalFilename());
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

        FileInfo fileInfo = new FileInfo();
        fileInfo.setFileHash(fileHash);
        fileInfo.setMalicious(malwareDetectionService.detectMaliciousFile());
        fileInfo.setName(file.getOriginalFilename());
        fileInfo.setFirstSeen(LocalDateTime.now());
        fileInfo.setSize(file.getSize());

        try {
            Files.delete(filePath);
        } catch (IOException e) {
            e.printStackTrace();
        }

        return fileInfoRepository.save(fileInfo);
    }
}