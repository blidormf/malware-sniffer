package com.blidormf.malwaresniffer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Map;

@Service
public class MalwareDetectionService {
    @Value("${huggingface.api.endpoint}")
    private String apiEndpoint;

    @Value("${huggingface.api.key}")
    private String apiKey;

    private String fileName;

    public boolean detectMaliciousFile() {
        String filePath = "src/main/python/" + this.fileName;
        String pythonScript = "src/main/python/prediction.py";
        String result = "";

        try {
            ProcessBuilder pb = new ProcessBuilder("python", pythonScript, filePath);
            Map<String, String> env = pb.environment();
            env.put("TF_CPP_MIN_LOG_LEVEL", "2");
            Process process = pb.start();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result = line;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return result.equals("malicious");
    }

    public boolean detectMaliciousUrl(String url) {
        try {
            HttpClient httpClient = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(apiEndpoint))
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + apiKey)
                    .POST(HttpRequest.BodyPublishers.ofString("{\"inputs\": \"" + url + "\"}"))
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == HttpURLConnection.HTTP_OK) {
                String responseBody = response.body();
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode jsonNode = objectMapper.readTree(responseBody);
                JsonNode resultNode = jsonNode.get(0).get(1);

                String label = resultNode.get("label").asText();
                double score = resultNode.get("score").asDouble();

                return "MALWARE".equals(label) && score >= 0.5;
            } else {
                throw new RuntimeException("API request failed with status code: " + response.statusCode());
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

        return false;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }
}
